// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/28/2020 23:03:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DigitalClock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DigitalClock_vlg_sample_tst(
	CLK,
	K1,
	S1,
	S2,
	S3,
	S4,
	S5,
	S6,
	S7,
	S8,
	sampler_tx
);
input  CLK;
input  K1;
input  S1;
input  S2;
input  S3;
input  S4;
input  S5;
input  S6;
input  S7;
input  S8;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or K1 or S1 or S2 or S3 or S4 or S5 or S6 or S7 or S8)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DigitalClock_vlg_check_tst (
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	hour_a,
	hour_b,
	led,
	min_a,
	min_b,
	sec_a,
	sec_b,
	sel0,
	sel1,
	sel2,
	sel3,
	sel4,
	sel5,
	sampler_rx
);
input  a;
input  b;
input  c;
input  d;
input  e;
input  f;
input  g;
input  hour_a;
input  hour_b;
input  led;
input  min_a;
input  min_b;
input  sec_a;
input  sec_b;
input  sel0;
input  sel1;
input  sel2;
input  sel3;
input  sel4;
input  sel5;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg  hour_a_expected;
reg  hour_b_expected;
reg  led_expected;
reg  min_a_expected;
reg  min_b_expected;
reg  sec_a_expected;
reg  sec_b_expected;
reg  sel0_expected;
reg  sel1_expected;
reg  sel2_expected;
reg  sel3_expected;
reg  sel4_expected;
reg  sel5_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg  hour_a_prev;
reg  hour_b_prev;
reg  led_prev;
reg  min_a_prev;
reg  min_b_prev;
reg  sec_a_prev;
reg  sec_b_prev;
reg  sel0_prev;
reg  sel1_prev;
reg  sel2_prev;
reg  sel3_prev;
reg  sel4_prev;
reg  sel5_prev;

reg  hour_a_expected_prev;
reg  hour_b_expected_prev;
reg  min_a_expected_prev;
reg  min_b_expected_prev;
reg  sec_a_expected_prev;
reg  sec_b_expected_prev;

reg  last_hour_a_exp;
reg  last_hour_b_exp;
reg  last_min_a_exp;
reg  last_min_b_exp;
reg  last_sec_a_exp;
reg  last_sec_b_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:20] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 20'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	hour_a_prev = hour_a;
	hour_b_prev = hour_b;
	led_prev = led;
	min_a_prev = min_a;
	min_b_prev = min_b;
	sec_a_prev = sec_a;
	sec_b_prev = sec_b;
	sel0_prev = sel0;
	sel1_prev = sel1;
	sel2_prev = sel2;
	sel3_prev = sel3;
	sel4_prev = sel4;
	sel5_prev = sel5;
end

// update expected /o prevs

always @(trigger)
begin
	hour_a_expected_prev = hour_a_expected;
	hour_b_expected_prev = hour_b_expected;
	min_a_expected_prev = min_a_expected;
	min_b_expected_prev = min_b_expected;
	sec_a_expected_prev = sec_a_expected;
	sec_b_expected_prev = sec_b_expected;
end



// expected hour_a
initial
begin
	hour_a_expected = 1'bX;
end 

// expected hour_b
initial
begin
	hour_b_expected = 1'bX;
end 

// expected min_a
initial
begin
	min_a_expected = 1'bX;
end 

// expected min_b
initial
begin
	min_b_expected = 1'bX;
end 

// expected sec_a
initial
begin
	sec_a_expected = 1'bX;
end 

// expected sec_b
initial
begin
	sec_b_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or d_expected or d or e_expected or e or f_expected or f or g_expected or g or hour_a_expected or hour_a or hour_b_expected or hour_b or led_expected or led or min_a_expected or min_a or min_b_expected or min_b or sec_a_expected or sec_a or sec_b_expected or sec_b or sel0_expected or sel0 or sel1_expected or sel1 or sel2_expected or sel2 or sel3_expected or sel3 or sel4_expected or sel4 or sel5_expected or sel5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected e = %b | expected f = %b | expected g = %b | expected hour_a = %b | expected hour_b = %b | expected led = %b | expected min_a = %b | expected min_b = %b | expected sec_a = %b | expected sec_b = %b | expected sel0 = %b | expected sel1 = %b | expected sel2 = %b | expected sel3 = %b | expected sel4 = %b | expected sel5 = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,hour_a_expected_prev,hour_b_expected_prev,led_expected_prev,min_a_expected_prev,min_b_expected_prev,sec_a_expected_prev,sec_b_expected_prev,sel0_expected_prev,sel1_expected_prev,sel2_expected_prev,sel3_expected_prev,sel4_expected_prev,sel5_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real d = %b | real e = %b | real f = %b | real g = %b | real hour_a = %b | real hour_b = %b | real led = %b | real min_a = %b | real min_b = %b | real sec_a = %b | real sec_b = %b | real sel0 = %b | real sel1 = %b | real sel2 = %b | real sel3 = %b | real sel4 = %b | real sel5 = %b | ",a_prev,b_prev,c_prev,d_prev,e_prev,f_prev,g_prev,hour_a_prev,hour_b_prev,led_prev,min_a_prev,min_b_prev,sec_a_prev,sec_b_prev,sel0_prev,sel1_prev,sel2_prev,sel3_prev,sel4_prev,sel5_prev);
`endif
	if (
		( hour_a_expected_prev !== 1'bx ) && ( hour_a_prev !== hour_a_expected_prev )
		&& ((hour_a_expected_prev !== last_hour_a_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_a_expected_prev);
		$display ("     Real value = %b", hour_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hour_a_exp = hour_a_expected_prev;
	end
	if (
		( hour_b_expected_prev !== 1'bx ) && ( hour_b_prev !== hour_b_expected_prev )
		&& ((hour_b_expected_prev !== last_hour_b_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_b_expected_prev);
		$display ("     Real value = %b", hour_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hour_b_exp = hour_b_expected_prev;
	end
	if (
		( min_a_expected_prev !== 1'bx ) && ( min_a_prev !== min_a_expected_prev )
		&& ((min_a_expected_prev !== last_min_a_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_a_expected_prev);
		$display ("     Real value = %b", min_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_min_a_exp = min_a_expected_prev;
	end
	if (
		( min_b_expected_prev !== 1'bx ) && ( min_b_prev !== min_b_expected_prev )
		&& ((min_b_expected_prev !== last_min_b_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_b_expected_prev);
		$display ("     Real value = %b", min_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_min_b_exp = min_b_expected_prev;
	end
	if (
		( sec_a_expected_prev !== 1'bx ) && ( sec_a_prev !== sec_a_expected_prev )
		&& ((sec_a_expected_prev !== last_sec_a_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_a_expected_prev);
		$display ("     Real value = %b", sec_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sec_a_exp = sec_a_expected_prev;
	end
	if (
		( sec_b_expected_prev !== 1'bx ) && ( sec_b_prev !== sec_b_expected_prev )
		&& ((sec_b_expected_prev !== last_sec_b_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_b_expected_prev);
		$display ("     Real value = %b", sec_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sec_b_exp = sec_b_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DigitalClock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg K1;
reg S1;
reg S2;
reg S3;
reg S4;
reg S5;
reg S6;
reg S7;
reg S8;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;
wire hour_a;
wire hour_b;
wire led;
wire min_a;
wire min_b;
wire sec_a;
wire sec_b;
wire sel0;
wire sel1;
wire sel2;
wire sel3;
wire sel4;
wire sel5;

wire sampler;                             

// assign statements (if any)                          
DigitalClock i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.CLK(CLK),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.hour_a(hour_a),
	.hour_b(hour_b),
	.K1(K1),
	.led(led),
	.min_a(min_a),
	.min_b(min_b),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.sec_a(sec_a),
	.sec_b(sec_b),
	.sel0(sel0),
	.sel1(sel1),
	.sel2(sel2),
	.sel3(sel3),
	.sel4(sel4),
	.sel5(sel5)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

DigitalClock_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.K1(K1),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.sampler_tx(sampler)
);

DigitalClock_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.hour_a(hour_a),
	.hour_b(hour_b),
	.led(led),
	.min_a(min_a),
	.min_b(min_b),
	.sec_a(sec_a),
	.sec_b(sec_b),
	.sel0(sel0),
	.sel1(sel1),
	.sel2(sel2),
	.sel3(sel3),
	.sel4(sel4),
	.sel5(sel5),
	.sampler_rx(sampler)
);
endmodule

